# Welcome to Cryzen.
# This file is a minimal example to get you started.
# If you have any questions, you can always ask us on Telegram: t.me/cryzen 
# Or check out Catalyst's documentation: https://enigma.co/catalyst/
# Happy trading!
# youtube: biSv6994rpY


import pandas as pd
import numpy as np
from cryzen import plot, param
from catalyst.api import order, get_open_orders, cancel_order
import inspect


# Exchange, symbol to trade, and starting capital
EXCHANGE_NAME  = param('crix', type='dropdown', values='crix')
SYMBOL_NAME    = param("eth_btc", type='dropdown', values=['ltc_btc', 'eth_btc', 'xrp_btc', 'xlm_btc', 'bch_btc'])
CAPITAL_BASE   = param(1, type='num', values=[50,1,10000]) # Units in `QUOTE_CURRENCY` below
QUOTE_CURRENCY = 'btc'


# Trading frequency, and time range to backtest over
# choices: 'minute', or 'daily'
DATA_FREQUENCY = param('minute', type='dropdown', values=['minute'])
BACKTESTING_RANGE = param('2019-02-22', type='dropdown', values=['2019-02-22'])
START_TIME     = pd.to_datetime('2019-02-22', utc=True)
END_TIME       = pd.to_datetime('2019-02-22', utc=True)


def initialize(context):
    context.asset = symbol(SYMBOL_NAME)
    context.i = 0


def cancel_all_orders(context, data):
    # Get open orders
    open_orders = get_open_orders(context.asset)
    
    # Cancel all open orders
    for i in open_orders:
        cancel_order(i)


test_steps = [
# Place limit order at price that should not fill it
lambda context, data: order(context.asset, 0.11, limit_price=100),
# Cancel hanging order
lambda context, data: cancel_all_orders(context, data),
# Fill buy order
lambda context, data: order(context.asset, 0.11, limit_price=200),
# Sell at ridiculous price, results in hanging order
lambda context, data: order(context.asset, -1*context.portfolio.positions[context.asset].amount, limit_price=200),
# Cancel hanging order
lambda context, data: cancel_all_orders(context, data),
# Sell at a limit price where it will fill
lambda context, data: order(context.asset, -1*context.portfolio.positions[context.asset].amount, limit_price=100),
# Should buy 70% of portfolio
lambda context, data: order_target_percent(context.asset, 0.7),
# Nothing to cancel, so should do nothing and continue
lambda context, data: cancel_all_orders(context, data),
# Should sell a bit
lambda context, data: order_target_percent(context.asset, 0.3),
# Sell the rest
lambda context, data: order_target_percent(context.asset, 0),
# Get 50/50 to place a buy and sell snipe
lambda context, data: order_target_percent(context.asset, 0.5),
# Buy & wait
# lambda context, data: order(context.asset, 0.11, limit_price=144),
# Sell & wait
# lambda context, data: order(context.asset, -1*context.portfolio.positions[context.asset].amount, limit_price=148.5),
]


def handle_data(context, data):

    global test_steps
    
    # Plot start
    cost_start = context.portfolio.positions[context.asset].cost_basis
    amt_start = context.portfolio.positions[context.asset].amount
    open_orders_start = len(get_open_orders(context.asset))
    txns_start = len(context.perf_tracker.todays_performance.processed_transactions)
    # Custom plot
    plot(context, cost_start=cost_start, amt_start=amt_start, open_orders_start=open_orders_start, txns_start=txns_start)

    if context.i < len(test_steps):
        test_steps[context.i](context, data)
        record(plot_text=inspect.getsource(test_steps[context.i]))
    
    context.i += 1
        
    # Plot end
    cost_end = context.portfolio.positions[context.asset].cost_basis
    amt_end = context.portfolio.positions[context.asset].amount
    open_orders_end = len(get_open_orders(context.asset))
    txns_end = len(context.perf_tracker.todays_performance.processed_transactions)
    # Custom plot
    plot(context, cost_end=cost_end, amt_end=amt_end, open_orders_end=open_orders_end, txns_end=txns_end)
    
    
